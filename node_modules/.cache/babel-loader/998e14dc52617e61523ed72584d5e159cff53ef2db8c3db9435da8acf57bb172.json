{"ast":null,"code":"import _objectWithoutProperties from \"/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nconst _excluded = [\"function_call\", \"stream\"],\n  _excluded2 = [\"tool_choice\", \"stream\"],\n  _excluded3 = [\"function_call\"];\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\nimport { OpenAIError } from \"../error.mjs\";\nimport { isRunnableFunctionWithParse } from \"./RunnableFunction.mjs\";\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from \"./chatCompletionUtils.mjs\";\nimport { EventStream } from \"./EventStream.mjs\";\nimport { isAutoParsableTool, parseChatCompletion } from \"../lib/parser.mjs\";\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport class AbstractChatCompletionRunner extends EventStream {\n  constructor() {\n    super(...arguments);\n    _AbstractChatCompletionRunner_instances.add(this);\n    this._chatCompletions = [];\n    this.messages = [];\n  }\n  _addChatCompletion(chatCompletion) {\n    var _chatCompletion$choic;\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = (_chatCompletion$choic = chatCompletion.choices[0]) === null || _chatCompletion$choic === void 0 ? void 0 : _chatCompletion$choic.message;\n    if (message) this._addMessage(message);\n    return chatCompletion;\n  }\n  _addMessage(message) {\n    let emit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!('content' in message)) message.content = null;\n    this.messages.push(message);\n    if (emit) {\n      this._emit('message', message);\n      if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n        // Note, this assumes that {role: 'tool', content: â€¦} is always the result of a call of tool of type=function.\n        this._emit('functionCallResult', message.content);\n      } else if (isAssistantMessage(message) && message.function_call) {\n        this._emit('functionCall', message.function_call);\n      } else if (isAssistantMessage(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion() {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n  }\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n  }\n  async finalFunctionCallResult() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n  }\n  async totalUsage() {\n    await this.done();\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n  }\n  allChatCompletions() {\n    return [...this._chatCompletions];\n  }\n  _emitFinal() {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    if (finalContent) this._emit('finalContent', finalContent);\n    const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n    const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n    if (this._chatCompletions.some(c => c.usage)) {\n      this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n    }\n  }\n  async _createChatCompletion(client, params, options) {\n    const signal = options === null || options === void 0 ? void 0 : options.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n    const chatCompletion = await client.chat.completions.create(_objectSpread(_objectSpread({}, params), {}, {\n      stream: false\n    }), _objectSpread(_objectSpread({}, options), {}, {\n      signal: this.controller.signal\n    }));\n    this._connected();\n    return this._addChatCompletion(parseChatCompletion(chatCompletion, params));\n  }\n  async _runChatCompletion(client, params, options) {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(client, params, options);\n  }\n  async _runFunctions(client, params, options) {\n    const role = 'function';\n    const {\n        function_call = 'auto',\n        stream\n      } = params,\n      restParams = _objectWithoutProperties(params, _excluded);\n    const singleFunctionToCall = typeof function_call !== 'string' && (function_call === null || function_call === void 0 ? void 0 : function_call.name);\n    const {\n      maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS\n    } = options || {};\n    const functionsByName = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n    const functions = params.functions.map(f => ({\n      name: f.name || f.function.name,\n      parameters: f.parameters,\n      description: f.description\n    }));\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      var _chatCompletion$choic2;\n      const chatCompletion = await this._createChatCompletion(client, _objectSpread(_objectSpread({}, restParams), {}, {\n        function_call,\n        functions,\n        messages: [...this.messages]\n      }), options);\n      const message = (_chatCompletion$choic2 = chatCompletion.choices[0]) === null || _chatCompletion$choic2 === void 0 ? void 0 : _chatCompletion$choic2.message;\n      if (!message) {\n        throw new OpenAIError(\"missing message in ChatCompletion response\");\n      }\n      if (!message.function_call) return;\n      const {\n        name,\n        arguments: args\n      } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn) {\n        const content = \"Invalid function_call: \".concat(JSON.stringify(name), \". Available options are: \").concat(functions.map(f => JSON.stringify(f.name)).join(', '), \". Please try again\");\n        this._addMessage({\n          role,\n          name,\n          content\n        });\n        continue;\n      } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n        const content = \"Invalid function_call: \".concat(JSON.stringify(name), \". \").concat(JSON.stringify(singleFunctionToCall), \" requested. Please try again\");\n        this._addMessage({\n          role,\n          name,\n          content\n        });\n        continue;\n      }\n      let parsed;\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role,\n          name,\n          content: error instanceof Error ? error.message : String(error)\n        });\n        continue;\n      }\n      // @ts-expect-error it can't rule out `never` type.\n      const rawContent = await fn.function(parsed, this);\n      const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n      this._addMessage({\n        role,\n        name,\n        content\n      });\n      if (singleFunctionToCall) return;\n    }\n  }\n  async _runTools(client, params, options) {\n    var _tool_choice$function;\n    const role = 'tool';\n    const {\n        tool_choice = 'auto',\n        stream\n      } = params,\n      restParams = _objectWithoutProperties(params, _excluded2);\n    const singleFunctionToCall = typeof tool_choice !== 'string' && (tool_choice === null || tool_choice === void 0 || (_tool_choice$function = tool_choice.function) === null || _tool_choice$function === void 0 ? void 0 : _tool_choice$function.name);\n    const {\n      maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS\n    } = options || {};\n    // TODO(someday): clean this logic up\n    const inputTools = params.tools.map(tool => {\n      if (isAutoParsableTool(tool)) {\n        if (!tool.$callback) {\n          throw new OpenAIError('Tool given to `.runTools()` that does not have an associated function');\n        }\n        return {\n          type: 'function',\n          function: {\n            function: tool.$callback,\n            name: tool.function.name,\n            description: tool.function.description || '',\n            parameters: tool.function.parameters,\n            parse: tool.$parseRaw,\n            strict: true\n          }\n        };\n      }\n      return tool;\n    });\n    const functionsByName = {};\n    for (const f of inputTools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n    const tools = 'tools' in params ? inputTools.map(t => t.type === 'function' ? {\n      type: 'function',\n      function: {\n        name: t.function.name || t.function.function.name,\n        parameters: t.function.parameters,\n        description: t.function.description,\n        strict: t.function.strict\n      }\n    } : t) : undefined;\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      var _chatCompletion$choic3, _message$tool_calls;\n      const chatCompletion = await this._createChatCompletion(client, _objectSpread(_objectSpread({}, restParams), {}, {\n        tool_choice,\n        tools,\n        messages: [...this.messages]\n      }), options);\n      const message = (_chatCompletion$choic3 = chatCompletion.choices[0]) === null || _chatCompletion$choic3 === void 0 ? void 0 : _chatCompletion$choic3.message;\n      if (!message) {\n        throw new OpenAIError(\"missing message in ChatCompletion response\");\n      }\n      if (!((_message$tool_calls = message.tool_calls) !== null && _message$tool_calls !== void 0 && _message$tool_calls.length)) {\n        return;\n      }\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const {\n          name,\n          arguments: args\n        } = tool_call.function;\n        const fn = functionsByName[name];\n        if (!fn) {\n          const content = \"Invalid tool_call: \".concat(JSON.stringify(name), \". Available options are: \").concat(Object.keys(functionsByName).map(name => JSON.stringify(name)).join(', '), \". Please try again\");\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = \"Invalid tool_call: \".concat(JSON.stringify(name), \". \").concat(JSON.stringify(singleFunctionToCall), \" requested. Please try again\");\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        let parsed;\n        try {\n          parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({\n            role,\n            tool_call_id,\n            content\n          });\n          continue;\n        }\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n        this._addMessage({\n          role,\n          tool_call_id,\n          content\n        });\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n    return;\n  }\n}\n_AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n  var _classPrivateFieldGe;\n  return (_classPrivateFieldGe = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content) !== null && _classPrivateFieldGe !== void 0 ? _classPrivateFieldGe : null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n  let i = this.messages.length;\n  while (i-- > 0) {\n    const message = this.messages[i];\n    if (isAssistantMessage(message)) {\n      var _message$content, _message$refusal;\n      const {\n          function_call\n        } = message,\n        rest = _objectWithoutProperties(message, _excluded3);\n      // TODO: support audio here\n      const ret = _objectSpread(_objectSpread({}, rest), {}, {\n        content: (_message$content = message.content) !== null && _message$content !== void 0 ? _message$content : null,\n        refusal: (_message$refusal = message.refusal) !== null && _message$refusal !== void 0 ? _message$refusal : null\n      });\n      if (function_call) {\n        ret.function_call = function_call;\n      }\n      return ret;\n    }\n  }\n  throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    var _message$tool_calls2;\n    const message = this.messages[i];\n    if (isAssistantMessage(message) && message !== null && message !== void 0 && message.function_call) {\n      return message.function_call;\n    }\n    if (isAssistantMessage(message) && message !== null && message !== void 0 && (_message$tool_calls2 = message.tool_calls) !== null && _message$tool_calls2 !== void 0 && _message$tool_calls2.length) {\n      var _message$tool_calls$a;\n      return (_message$tool_calls$a = message.tool_calls.at(-1)) === null || _message$tool_calls$a === void 0 ? void 0 : _message$tool_calls$a.function;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n  for (let i = this.messages.length - 1; i >= 0; i--) {\n    const message = this.messages[i];\n    if (isFunctionMessage(message) && message.content != null) {\n      return message.content;\n    }\n    if (isToolMessage(message) && message.content != null && typeof message.content === 'string' && this.messages.some(x => {\n      var _x$tool_calls;\n      return x.role === 'assistant' && ((_x$tool_calls = x.tool_calls) === null || _x$tool_calls === void 0 ? void 0 : _x$tool_calls.some(y => y.type === 'function' && y.id === message.tool_call_id));\n    })) {\n      return message.content;\n    }\n  }\n  return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n  const total = {\n    completion_tokens: 0,\n    prompt_tokens: 0,\n    total_tokens: 0\n  };\n  for (const {\n    usage\n  } of this._chatCompletions) {\n    if (usage) {\n      total.completion_tokens += usage.completion_tokens;\n      total.prompt_tokens += usage.prompt_tokens;\n      total.total_tokens += usage.total_tokens;\n    }\n  }\n  return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n  if (params.n != null && params.n > 1) {\n    throw new OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n  }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n  return typeof rawContent === 'string' ? rawContent : rawContent === undefined ? 'undefined' : JSON.stringify(rawContent);\n};","map":{"version":3,"names":["OpenAIError","isRunnableFunctionWithParse","isAssistantMessage","isFunctionMessage","isToolMessage","EventStream","isAutoParsableTool","parseChatCompletion","DEFAULT_MAX_CHAT_COMPLETIONS","AbstractChatCompletionRunner","constructor","_chatCompletions","messages","_addChatCompletion","chatCompletion","_chatCompletion$choic","push","_emit","message","choices","_addMessage","emit","arguments","length","undefined","content","function_call","tool_calls","tool_call","type","function","finalChatCompletion","done","completion","finalContent","__classPrivateFieldGet","_AbstractChatCompletionRunner_instances","_AbstractChatCompletionRunner_getFinalContent","call","finalMessage","_AbstractChatCompletionRunner_getFinalMessage","finalFunctionCall","_AbstractChatCompletionRunner_getFinalFunctionCall","finalFunctionCallResult","_AbstractChatCompletionRunner_getFinalFunctionCallResult","totalUsage","_AbstractChatCompletionRunner_calculateTotalUsage","allChatCompletions","_emitFinal","some","c","usage","_createChatCompletion","client","params","options","signal","aborted","controller","abort","addEventListener","_AbstractChatCompletionRunner_validateParams","chat","completions","create","_objectSpread","stream","_connected","_runChatCompletion","_runFunctions","role","restParams","_objectWithoutProperties","_excluded","singleFunctionToCall","name","maxChatCompletions","functionsByName","f","functions","map","parameters","description","i","_chatCompletion$choic2","args","fn","concat","JSON","stringify","join","parsed","parse","error","Error","String","rawContent","_AbstractChatCompletionRunner_stringifyFunctionCallResult","_runTools","_tool_choice$function","tool_choice","_excluded2","inputTools","tools","tool","$callback","$parseRaw","strict","t","_chatCompletion$choic3","_message$tool_calls","tool_call_id","id","Object","keys","_classPrivateFieldGe","_message$content","_message$refusal","rest","_excluded3","ret","refusal","_message$tool_calls2","_message$tool_calls$a","at","x","_x$tool_calls","y","total","completion_tokens","prompt_tokens","total_tokens","n"],"sources":["/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/openai/src/lib/AbstractChatCompletionRunner.ts"],"sourcesContent":["import * as Core from '../core';\nimport { type CompletionUsage } from '../resources/completions';\nimport {\n  type ChatCompletion,\n  type ChatCompletionMessage,\n  type ChatCompletionMessageParam,\n  type ChatCompletionCreateParams,\n  type ChatCompletionTool,\n} from '../resources/chat/completions';\nimport { OpenAIError } from '../error';\nimport {\n  type RunnableFunction,\n  isRunnableFunctionWithParse,\n  type BaseFunctionsArgs,\n  RunnableToolFunction,\n} from './RunnableFunction';\nimport { ChatCompletionFunctionRunnerParams, ChatCompletionToolRunnerParams } from './ChatCompletionRunner';\nimport {\n  ChatCompletionStreamingFunctionRunnerParams,\n  ChatCompletionStreamingToolRunnerParams,\n} from './ChatCompletionStreamingRunner';\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from './chatCompletionUtils';\nimport { BaseEvents, EventStream } from './EventStream';\nimport { ParsedChatCompletion } from '../resources/beta/chat/completions';\nimport OpenAI from '../index';\nimport { isAutoParsableTool, parseChatCompletion } from '../lib/parser';\n\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport interface RunnerOptions extends Core.RequestOptions {\n  /** How many requests to make before canceling. Default 10. */\n  maxChatCompletions?: number;\n}\n\nexport class AbstractChatCompletionRunner<\n  EventTypes extends AbstractChatCompletionRunnerEvents,\n  ParsedT,\n> extends EventStream<EventTypes> {\n  protected _chatCompletions: ParsedChatCompletion<ParsedT>[] = [];\n  messages: ChatCompletionMessageParam[] = [];\n\n  protected _addChatCompletion(\n    this: AbstractChatCompletionRunner<AbstractChatCompletionRunnerEvents, ParsedT>,\n    chatCompletion: ParsedChatCompletion<ParsedT>,\n  ): ParsedChatCompletion<ParsedT> {\n    this._chatCompletions.push(chatCompletion);\n    this._emit('chatCompletion', chatCompletion);\n    const message = chatCompletion.choices[0]?.message;\n    if (message) this._addMessage(message as ChatCompletionMessageParam);\n    return chatCompletion;\n  }\n\n  protected _addMessage(\n    this: AbstractChatCompletionRunner<AbstractChatCompletionRunnerEvents, ParsedT>,\n    message: ChatCompletionMessageParam,\n    emit = true,\n  ) {\n    if (!('content' in message)) message.content = null;\n\n    this.messages.push(message);\n\n    if (emit) {\n      this._emit('message', message);\n      if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n        // Note, this assumes that {role: 'tool', content: â€¦} is always the result of a call of tool of type=function.\n        this._emit('functionCallResult', message.content as string);\n      } else if (isAssistantMessage(message) && message.function_call) {\n        this._emit('functionCall', message.function_call);\n      } else if (isAssistantMessage(message) && message.tool_calls) {\n        for (const tool_call of message.tool_calls) {\n          if (tool_call.type === 'function') {\n            this._emit('functionCall', tool_call.function);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns a promise that resolves with the final ChatCompletion, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n   */\n  async finalChatCompletion(): Promise<ParsedChatCompletion<ParsedT>> {\n    await this.done();\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (!completion) throw new OpenAIError('stream ended without producing a ChatCompletion');\n    return completion;\n  }\n\n  #getFinalContent(): string | null {\n    return this.#getFinalMessage().content ?? null;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalContent(): Promise<string | null> {\n    await this.done();\n    return this.#getFinalContent();\n  }\n\n  #getFinalMessage(): ChatCompletionMessage {\n    let i = this.messages.length;\n    while (i-- > 0) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message)) {\n        const { function_call, ...rest } = message;\n\n        // TODO: support audio here\n        const ret: Omit<ChatCompletionMessage, 'audio'> = {\n          ...rest,\n          content: (message as ChatCompletionMessage).content ?? null,\n          refusal: (message as ChatCompletionMessage).refusal ?? null,\n        };\n        if (function_call) {\n          ret.function_call = function_call;\n        }\n        return ret;\n      }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n  }\n\n  /**\n   * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n   * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalMessage(): Promise<ChatCompletionMessage> {\n    await this.done();\n    return this.#getFinalMessage();\n  }\n\n  #getFinalFunctionCall(): ChatCompletionMessage.FunctionCall | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isAssistantMessage(message) && message?.function_call) {\n        return message.function_call;\n      }\n      if (isAssistantMessage(message) && message?.tool_calls?.length) {\n        return message.tool_calls.at(-1)?.function;\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n   * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n   */\n  async finalFunctionCall(): Promise<ChatCompletionMessage.FunctionCall | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCall();\n  }\n\n  #getFinalFunctionCallResult(): string | undefined {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n      const message = this.messages[i];\n      if (isFunctionMessage(message) && message.content != null) {\n        return message.content;\n      }\n      if (\n        isToolMessage(message) &&\n        message.content != null &&\n        typeof message.content === 'string' &&\n        this.messages.some(\n          (x) =>\n            x.role === 'assistant' &&\n            x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id),\n        )\n      ) {\n        return message.content;\n      }\n    }\n\n    return;\n  }\n\n  async finalFunctionCallResult(): Promise<string | undefined> {\n    await this.done();\n    return this.#getFinalFunctionCallResult();\n  }\n\n  #calculateTotalUsage(): CompletionUsage {\n    const total: CompletionUsage = {\n      completion_tokens: 0,\n      prompt_tokens: 0,\n      total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n      if (usage) {\n        total.completion_tokens += usage.completion_tokens;\n        total.prompt_tokens += usage.prompt_tokens;\n        total.total_tokens += usage.total_tokens;\n      }\n    }\n    return total;\n  }\n\n  async totalUsage(): Promise<CompletionUsage> {\n    await this.done();\n    return this.#calculateTotalUsage();\n  }\n\n  allChatCompletions(): ChatCompletion[] {\n    return [...this._chatCompletions];\n  }\n\n  protected override _emitFinal(\n    this: AbstractChatCompletionRunner<AbstractChatCompletionRunnerEvents, ParsedT>,\n  ) {\n    const completion = this._chatCompletions[this._chatCompletions.length - 1];\n    if (completion) this._emit('finalChatCompletion', completion);\n    const finalMessage = this.#getFinalMessage();\n    if (finalMessage) this._emit('finalMessage', finalMessage);\n    const finalContent = this.#getFinalContent();\n    if (finalContent) this._emit('finalContent', finalContent);\n\n    const finalFunctionCall = this.#getFinalFunctionCall();\n    if (finalFunctionCall) this._emit('finalFunctionCall', finalFunctionCall);\n\n    const finalFunctionCallResult = this.#getFinalFunctionCallResult();\n    if (finalFunctionCallResult != null) this._emit('finalFunctionCallResult', finalFunctionCallResult);\n\n    if (this._chatCompletions.some((c) => c.usage)) {\n      this._emit('totalUsage', this.#calculateTotalUsage());\n    }\n  }\n\n  #validateParams(params: ChatCompletionCreateParams): void {\n    if (params.n != null && params.n > 1) {\n      throw new OpenAIError(\n        'ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.',\n      );\n    }\n  }\n\n  protected async _createChatCompletion(\n    client: OpenAI,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ParsedChatCompletion<ParsedT>> {\n    const signal = options?.signal;\n    if (signal) {\n      if (signal.aborted) this.controller.abort();\n      signal.addEventListener('abort', () => this.controller.abort());\n    }\n    this.#validateParams(params);\n\n    const chatCompletion = await client.chat.completions.create(\n      { ...params, stream: false },\n      { ...options, signal: this.controller.signal },\n    );\n    this._connected();\n    return this._addChatCompletion(parseChatCompletion(chatCompletion, params));\n  }\n\n  protected async _runChatCompletion(\n    client: OpenAI,\n    params: ChatCompletionCreateParams,\n    options?: Core.RequestOptions,\n  ): Promise<ChatCompletion> {\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n    return await this._createChatCompletion(client, params, options);\n  }\n\n  protected async _runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    client: OpenAI,\n    params:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'function' as const;\n    const { function_call = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of params.functions) {\n      functionsByName[f.name || f.function.name] = f;\n    }\n\n    const functions: ChatCompletionCreateParams.Function[] = params.functions.map(\n      (f): ChatCompletionCreateParams.Function => ({\n        name: f.name || f.function.name,\n        parameters: f.parameters as Record<string, unknown>,\n        description: f.description,\n      }),\n    );\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        client,\n        {\n          ...restParams,\n          function_call,\n          functions,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.function_call) return;\n      const { name, arguments: args } = message.function_call;\n      const fn = functionsByName[name];\n      if (!fn) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\n          .map((f) => JSON.stringify(f.name))\n          .join(', ')}. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n        const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(\n          singleFunctionToCall,\n        )} requested. Please try again`;\n\n        this._addMessage({ role, name, content });\n        continue;\n      }\n\n      let parsed;\n      try {\n        parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n      } catch (error) {\n        this._addMessage({\n          role,\n          name,\n          content: error instanceof Error ? error.message : String(error),\n        });\n        continue;\n      }\n\n      // @ts-expect-error it can't rule out `never` type.\n      const rawContent = await fn.function(parsed, this);\n      const content = this.#stringifyFunctionCallResult(rawContent);\n\n      this._addMessage({ role, name, content });\n\n      if (singleFunctionToCall) return;\n    }\n  }\n\n  protected async _runTools<FunctionsArgs extends BaseFunctionsArgs>(\n    client: OpenAI,\n    params:\n      | ChatCompletionToolRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingToolRunnerParams<FunctionsArgs>,\n    options?: RunnerOptions,\n  ) {\n    const role = 'tool' as const;\n    const { tool_choice = 'auto', stream, ...restParams } = params;\n    const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n    const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n\n    // TODO(someday): clean this logic up\n    const inputTools = params.tools.map((tool): RunnableToolFunction<any> => {\n      if (isAutoParsableTool(tool)) {\n        if (!tool.$callback) {\n          throw new OpenAIError('Tool given to `.runTools()` that does not have an associated function');\n        }\n\n        return {\n          type: 'function',\n          function: {\n            function: tool.$callback,\n            name: tool.function.name,\n            description: tool.function.description || '',\n            parameters: tool.function.parameters as any,\n            parse: tool.$parseRaw,\n            strict: true,\n          },\n        };\n      }\n\n      return tool as any as RunnableToolFunction<any>;\n    });\n\n    const functionsByName: Record<string, RunnableFunction<any>> = {};\n    for (const f of inputTools) {\n      if (f.type === 'function') {\n        functionsByName[f.function.name || f.function.function.name] = f.function;\n      }\n    }\n\n    const tools: ChatCompletionTool[] =\n      'tools' in params ?\n        inputTools.map((t) =>\n          t.type === 'function' ?\n            {\n              type: 'function',\n              function: {\n                name: t.function.name || t.function.function.name,\n                parameters: t.function.parameters as Record<string, unknown>,\n                description: t.function.description,\n                strict: t.function.strict,\n              },\n            }\n          : (t as unknown as ChatCompletionTool),\n        )\n      : (undefined as any);\n\n    for (const message of params.messages) {\n      this._addMessage(message, false);\n    }\n\n    for (let i = 0; i < maxChatCompletions; ++i) {\n      const chatCompletion: ChatCompletion = await this._createChatCompletion(\n        client,\n        {\n          ...restParams,\n          tool_choice,\n          tools,\n          messages: [...this.messages],\n        },\n        options,\n      );\n      const message = chatCompletion.choices[0]?.message;\n      if (!message) {\n        throw new OpenAIError(`missing message in ChatCompletion response`);\n      }\n      if (!message.tool_calls?.length) {\n        return;\n      }\n\n      for (const tool_call of message.tool_calls) {\n        if (tool_call.type !== 'function') continue;\n        const tool_call_id = tool_call.id;\n        const { name, arguments: args } = tool_call.function;\n        const fn = functionsByName[name];\n\n        if (!fn) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${Object.keys(\n            functionsByName,\n          )\n            .map((name) => JSON.stringify(name))\n            .join(', ')}. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        } else if (singleFunctionToCall && singleFunctionToCall !== name) {\n          const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(\n            singleFunctionToCall,\n          )} requested. Please try again`;\n\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        let parsed;\n        try {\n          parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n        } catch (error) {\n          const content = error instanceof Error ? error.message : String(error);\n          this._addMessage({ role, tool_call_id, content });\n          continue;\n        }\n\n        // @ts-expect-error it can't rule out `never` type.\n        const rawContent = await fn.function(parsed, this);\n        const content = this.#stringifyFunctionCallResult(rawContent);\n        this._addMessage({ role, tool_call_id, content });\n\n        if (singleFunctionToCall) {\n          return;\n        }\n      }\n    }\n\n    return;\n  }\n\n  #stringifyFunctionCallResult(rawContent: unknown): string {\n    return (\n      typeof rawContent === 'string' ? rawContent\n      : rawContent === undefined ? 'undefined'\n      : JSON.stringify(rawContent)\n    );\n  }\n}\n\nexport interface AbstractChatCompletionRunnerEvents extends BaseEvents {\n  functionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  message: (message: ChatCompletionMessageParam) => void;\n  chatCompletion: (completion: ChatCompletion) => void;\n  finalContent: (contentSnapshot: string) => void;\n  finalMessage: (message: ChatCompletionMessageParam) => void;\n  finalChatCompletion: (completion: ChatCompletion) => void;\n  finalFunctionCall: (functionCall: ChatCompletionMessage.FunctionCall) => void;\n  functionCallResult: (content: string) => void;\n  finalFunctionCallResult: (content: string) => void;\n  totalUsage: (usage: CompletionUsage) => void;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}