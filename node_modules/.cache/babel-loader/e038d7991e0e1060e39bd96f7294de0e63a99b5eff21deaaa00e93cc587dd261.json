{"ast":null,"code":"import _objectSpread from \"/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { ChatCompletionRunner } from \"../../../lib/ChatCompletionRunner.mjs\";\nimport { ChatCompletionStreamingRunner } from \"../../../lib/ChatCompletionStreamingRunner.mjs\";\nimport { ChatCompletionStream } from \"../../../lib/ChatCompletionStream.mjs\";\nimport { parseChatCompletion, validateInputTools } from \"../../../lib/parser.mjs\";\nexport { ChatCompletionStreamingRunner } from \"../../../lib/ChatCompletionStreamingRunner.mjs\";\nexport { ParsingFunction, ParsingToolFunction } from \"../../../lib/RunnableFunction.mjs\";\nexport { ChatCompletionStream } from \"../../../lib/ChatCompletionStream.mjs\";\nexport { ChatCompletionRunner } from \"../../../lib/ChatCompletionRunner.mjs\";\nexport class Completions extends APIResource {\n  parse(body, options) {\n    validateInputTools(body.tools);\n    return this._client.chat.completions.create(body, _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'beta.chat.completions.parse'\n      })\n    }))._thenUnwrap(completion => parseChatCompletion(completion, body));\n  }\n  runFunctions(body, options) {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runFunctions(this._client, body, options);\n    }\n    return ChatCompletionRunner.runFunctions(this._client, body, options);\n  }\n  runTools(body, options) {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runTools(this._client, body, options);\n    }\n    return ChatCompletionRunner.runTools(this._client, body, options);\n  }\n  /**\n   * Creates a chat completion stream\n   */\n  stream(body, options) {\n    return ChatCompletionStream.createChatCompletion(this._client, body, options);\n  }\n}","map":{"version":3,"names":["APIResource","ChatCompletionRunner","ChatCompletionStreamingRunner","ChatCompletionStream","parseChatCompletion","validateInputTools","ParsingFunction","ParsingToolFunction","Completions","parse","body","options","tools","_client","chat","completions","create","_objectSpread","headers","_thenUnwrap","completion","runFunctions","stream","runTools","createChatCompletion"],"sources":["/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/openai/src/resources/beta/chat/completions.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport * as Core from '../../../core';\nimport { APIResource } from '../../../resource';\nimport { ChatCompletionRunner, ChatCompletionFunctionRunnerParams } from '../../../lib/ChatCompletionRunner';\nimport {\n  ChatCompletionStreamingRunner,\n  ChatCompletionStreamingFunctionRunnerParams,\n} from '../../../lib/ChatCompletionStreamingRunner';\nimport { BaseFunctionsArgs } from '../../../lib/RunnableFunction';\nimport { RunnerOptions } from '../../../lib/AbstractChatCompletionRunner';\nimport { ChatCompletionToolRunnerParams } from '../../../lib/ChatCompletionRunner';\nimport { ChatCompletionStreamingToolRunnerParams } from '../../../lib/ChatCompletionStreamingRunner';\nimport { ChatCompletionStream, type ChatCompletionStreamParams } from '../../../lib/ChatCompletionStream';\nimport {\n  ChatCompletion,\n  ChatCompletionCreateParamsNonStreaming,\n  ChatCompletionMessage,\n  ChatCompletionMessageToolCall,\n} from '../../chat/completions';\nimport { ExtractParsedContentFromParams, parseChatCompletion, validateInputTools } from '../../../lib/parser';\n\nexport {\n  ChatCompletionStreamingRunner,\n  type ChatCompletionStreamingFunctionRunnerParams,\n} from '../../../lib/ChatCompletionStreamingRunner';\nexport {\n  type RunnableFunction,\n  type RunnableFunctions,\n  type RunnableFunctionWithParse,\n  type RunnableFunctionWithoutParse,\n  ParsingFunction,\n  ParsingToolFunction,\n} from '../../../lib/RunnableFunction';\nexport { type ChatCompletionToolRunnerParams } from '../../../lib/ChatCompletionRunner';\nexport { type ChatCompletionStreamingToolRunnerParams } from '../../../lib/ChatCompletionStreamingRunner';\nexport { ChatCompletionStream, type ChatCompletionStreamParams } from '../../../lib/ChatCompletionStream';\nexport {\n  ChatCompletionRunner,\n  type ChatCompletionFunctionRunnerParams,\n} from '../../../lib/ChatCompletionRunner';\n\nexport interface ParsedFunction extends ChatCompletionMessageToolCall.Function {\n  parsed_arguments?: unknown;\n}\n\nexport interface ParsedFunctionToolCall extends ChatCompletionMessageToolCall {\n  function: ParsedFunction;\n}\n\nexport interface ParsedChatCompletionMessage<ParsedT> extends ChatCompletionMessage {\n  parsed: ParsedT | null;\n  tool_calls: Array<ParsedFunctionToolCall>;\n}\n\nexport interface ParsedChoice<ParsedT> extends ChatCompletion.Choice {\n  message: ParsedChatCompletionMessage<ParsedT>;\n}\n\nexport interface ParsedChatCompletion<ParsedT> extends ChatCompletion {\n  choices: Array<ParsedChoice<ParsedT>>;\n}\n\nexport type ChatCompletionParseParams = ChatCompletionCreateParamsNonStreaming;\n\nexport class Completions extends APIResource {\n  parse<Params extends ChatCompletionParseParams, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ParsedChatCompletion<ParsedT>> {\n    validateInputTools(body.tools);\n\n    return this._client.chat.completions\n      .create(body, {\n        ...options,\n        headers: {\n          ...options?.headers,\n          'X-Stainless-Helper-Method': 'beta.chat.completions.parse',\n        },\n      })\n      ._thenUnwrap((completion) => parseChatCompletion(completion, body));\n  }\n\n  /**\n   * @deprecated - use `runTools` instead.\n   */\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner<null>;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body: ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStreamingRunner<null>;\n  runFunctions<FunctionsArgs extends BaseFunctionsArgs>(\n    body:\n      | ChatCompletionFunctionRunnerParams<FunctionsArgs>\n      | ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n    options?: Core.RequestOptions,\n  ): ChatCompletionRunner<null> | ChatCompletionStreamingRunner<null> {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runFunctions(\n        this._client,\n        body as ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs>,\n        options,\n      );\n    }\n    return ChatCompletionRunner.runFunctions(\n      this._client,\n      body as ChatCompletionFunctionRunnerParams<FunctionsArgs>,\n      options,\n    );\n  }\n\n  /**\n   * A convenience helper for using tool calls with the /chat/completions endpoint\n   * which automatically calls the JavaScript functions you provide and sends their\n   * results back to the /chat/completions endpoint, looping as long as the model\n   * requests function calls.\n   *\n   * For more details and examples, see\n   * [the docs](https://github.com/openai/openai-node#automated-function-calls)\n   */\n  runTools<\n    Params extends ChatCompletionToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(body: Params, options?: RunnerOptions): ChatCompletionRunner<ParsedT>;\n\n  runTools<\n    Params extends ChatCompletionStreamingToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(body: Params, options?: RunnerOptions): ChatCompletionStreamingRunner<ParsedT>;\n\n  runTools<\n    Params extends ChatCompletionToolRunnerParams<any> | ChatCompletionStreamingToolRunnerParams<any>,\n    ParsedT = ExtractParsedContentFromParams<Params>,\n  >(\n    body: Params,\n    options?: RunnerOptions,\n  ): ChatCompletionRunner<ParsedT> | ChatCompletionStreamingRunner<ParsedT> {\n    if (body.stream) {\n      return ChatCompletionStreamingRunner.runTools(\n        this._client,\n        body as ChatCompletionStreamingToolRunnerParams<any>,\n        options,\n      );\n    }\n\n    return ChatCompletionRunner.runTools(this._client, body as ChatCompletionToolRunnerParams<any>, options);\n  }\n\n  /**\n   * Creates a chat completion stream\n   */\n  stream<Params extends ChatCompletionStreamParams, ParsedT = ExtractParsedContentFromParams<Params>>(\n    body: Params,\n    options?: Core.RequestOptions,\n  ): ChatCompletionStream<ParsedT> {\n    return ChatCompletionStream.createChatCompletion(this._client, body, options);\n  }\n}\n"],"mappings":";AAAA;SAGSA,WAAW,QAAE;SACbC,oBAAoB,QAAsC;SAEjEC,6BAA6B,QAE9B;SAKQC,oBAAoB,QAAmC;SAOvBC,mBAAmB,EAAEC,kBAAkB,QAAE;SAGhFH,6BAA6B,QAE9B;SAMCI,eAAe,EACfC,mBAAmB,QACpB;SAGQJ,oBAAoB,QAAmC;SAE9DF,oBAAoB,QAErB;AAyBD,OAAM,MAAOO,WAAY,SAAQR,WAAW;EAC1CS,KAAKA,CACHC,IAAY,EACZC,OAA6B;IAE7BN,kBAAkB,CAACK,IAAI,CAACE,KAAK,CAAC;IAE9B,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAACC,WAAW,CACjCC,MAAM,CAACN,IAAI,EAAAO,aAAA,CAAAA,aAAA,KACPN,OAAO;MACVO,OAAO,EAAAD,aAAA,CAAAA,aAAA,KACFN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,OAAO;QACnB,2BAA2B,EAAE;MAA6B;IAC3D,EACF,CAAC,CACDC,WAAW,CAAEC,UAAU,IAAKhB,mBAAmB,CAACgB,UAAU,EAAEV,IAAI,CAAC,CAAC;EACvE;EAaAW,YAAYA,CACVX,IAE8D,EAC9DC,OAA6B;IAE7B,IAAID,IAAI,CAACY,MAAM,EAAE;MACf,OAAOpB,6BAA6B,CAACmB,YAAY,CAC/C,IAAI,CAACR,OAAO,EACZH,IAAkE,EAClEC,OAAO,CACR;;IAEH,OAAOV,oBAAoB,CAACoB,YAAY,CACtC,IAAI,CAACR,OAAO,EACZH,IAAyD,EACzDC,OAAO,CACR;EACH;EAqBAY,QAAQA,CAINb,IAAY,EACZC,OAAuB;IAEvB,IAAID,IAAI,CAACY,MAAM,EAAE;MACf,OAAOpB,6BAA6B,CAACqB,QAAQ,CAC3C,IAAI,CAACV,OAAO,EACZH,IAAoD,EACpDC,OAAO,CACR;;IAGH,OAAOV,oBAAoB,CAACsB,QAAQ,CAAC,IAAI,CAACV,OAAO,EAAEH,IAA2C,EAAEC,OAAO,CAAC;EAC1G;EAEA;;;EAGAW,MAAMA,CACJZ,IAAY,EACZC,OAA6B;IAE7B,OAAOR,oBAAoB,CAACqB,oBAAoB,CAAC,IAAI,CAACX,OAAO,EAAEH,IAAI,EAAEC,OAAO,CAAC;EAC/E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}