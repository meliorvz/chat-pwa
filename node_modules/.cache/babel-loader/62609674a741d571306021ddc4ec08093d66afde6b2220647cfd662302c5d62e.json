{"ast":null,"code":"import _objectSpread from \"/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { ChatCompletionStream } from \"./ChatCompletionStream.mjs\";\nexport class ChatCompletionStreamingRunner extends ChatCompletionStream {\n  static fromReadableStream(stream) {\n    const runner = new ChatCompletionStreamingRunner(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions(client, params, options) {\n    const runner = new ChatCompletionStreamingRunner(null);\n    const opts = _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'runFunctions'\n      })\n    });\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n  static runTools(client, params, options) {\n    const runner = new ChatCompletionStreamingRunner(\n    // @ts-expect-error TODO these types are incompatible\n    params);\n    const opts = _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n        'X-Stainless-Helper-Method': 'runTools'\n      })\n    });\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n}","map":{"version":3,"names":["ChatCompletionStream","ChatCompletionStreamingRunner","fromReadableStream","stream","runner","_run","_fromReadableStream","runFunctions","client","params","options","opts","_objectSpread","headers","_runFunctions","runTools","_runTools"],"sources":["/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/openai/src/lib/ChatCompletionStreamingRunner.ts"],"sourcesContent":["import {\n  type ChatCompletionChunk,\n  type ChatCompletionCreateParamsStreaming,\n} from '../resources/chat/completions';\nimport { RunnerOptions, type AbstractChatCompletionRunnerEvents } from './AbstractChatCompletionRunner';\nimport { type ReadableStream } from '../_shims/index';\nimport { RunnableTools, type BaseFunctionsArgs, type RunnableFunctions } from './RunnableFunction';\nimport { ChatCompletionSnapshot, ChatCompletionStream } from './ChatCompletionStream';\nimport OpenAI from '../index';\nimport { AutoParseableTool } from '../lib/parser';\n\nexport interface ChatCompletionStreamEvents extends AbstractChatCompletionRunnerEvents {\n  content: (contentDelta: string, contentSnapshot: string) => void;\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\n}\n\nexport type ChatCompletionStreamingFunctionRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsStreaming,\n  'functions'\n> & {\n  functions: RunnableFunctions<FunctionsArgs>;\n};\n\nexport type ChatCompletionStreamingToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\n  ChatCompletionCreateParamsStreaming,\n  'tools'\n> & {\n  tools: RunnableTools<FunctionsArgs> | AutoParseableTool<any, true>[];\n};\n\nexport class ChatCompletionStreamingRunner<ParsedT = null>\n  extends ChatCompletionStream<ParsedT>\n  implements AsyncIterable<ChatCompletionChunk>\n{\n  static override fromReadableStream(stream: ReadableStream): ChatCompletionStreamingRunner<null> {\n    const runner = new ChatCompletionStreamingRunner(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n\n  /** @deprecated - please use `runTools` instead. */\n  static runFunctions<T extends (string | object)[]>(\n    client: OpenAI,\n    params: ChatCompletionStreamingFunctionRunnerParams<T>,\n    options?: RunnerOptions,\n  ): ChatCompletionStreamingRunner<null> {\n    const runner = new ChatCompletionStreamingRunner(null);\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runFunctions' },\n    };\n    runner._run(() => runner._runFunctions(client, params, opts));\n    return runner;\n  }\n\n  static runTools<T extends (string | object)[], ParsedT = null>(\n    client: OpenAI,\n    params: ChatCompletionStreamingToolRunnerParams<T>,\n    options?: RunnerOptions,\n  ): ChatCompletionStreamingRunner<ParsedT> {\n    const runner = new ChatCompletionStreamingRunner<ParsedT>(\n      // @ts-expect-error TODO these types are incompatible\n      params,\n    );\n    const opts = {\n      ...options,\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n}\n"],"mappings":";SAOiCA,oBAAoB,QAAE;AAuBvD,OAAM,MAAOC,6BACX,SAAQD,oBAA6B;EAGrC,OAAgBE,kBAAkBA,CAACC,MAAsB;IACvD,MAAMC,MAAM,GAAG,IAAIH,6BAA6B,CAAC,IAAI,CAAC;IACtDG,MAAM,CAACC,IAAI,CAAC,MAAMD,MAAM,CAACE,mBAAmB,CAACH,MAAM,CAAC,CAAC;IACrD,OAAOC,MAAM;EACf;EAEA;EACA,OAAOG,YAAYA,CACjBC,MAAc,EACdC,MAAsD,EACtDC,OAAuB;IAEvB,MAAMN,MAAM,GAAG,IAAIH,6BAA6B,CAAC,IAAI,CAAC;IACtD,MAAMU,IAAI,GAAAC,aAAA,CAAAA,aAAA,KACLF,OAAO;MACVG,OAAO,EAAAD,aAAA,CAAAA,aAAA,KAAOF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,OAAO;QAAE,2BAA2B,EAAE;MAAc;IAAE,EAC9E;IACDT,MAAM,CAACC,IAAI,CAAC,MAAMD,MAAM,CAACU,aAAa,CAACN,MAAM,EAAEC,MAAM,EAAEE,IAAI,CAAC,CAAC;IAC7D,OAAOP,MAAM;EACf;EAEA,OAAOW,QAAQA,CACbP,MAAc,EACdC,MAAkD,EAClDC,OAAuB;IAEvB,MAAMN,MAAM,GAAG,IAAIH,6BAA6B;IAC9C;IACAQ,MAAM,CACP;IACD,MAAME,IAAI,GAAAC,aAAA,CAAAA,aAAA,KACLF,OAAO;MACVG,OAAO,EAAAD,aAAA,CAAAA,aAAA,KAAOF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,OAAO;QAAE,2BAA2B,EAAE;MAAU;IAAE,EAC1E;IACDT,MAAM,CAACC,IAAI,CAAC,MAAMD,MAAM,CAACY,SAAS,CAACR,MAAM,EAAEC,MAAM,EAAEE,IAAI,CAAC,CAAC;IACzD,OAAOP,MAAM;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}