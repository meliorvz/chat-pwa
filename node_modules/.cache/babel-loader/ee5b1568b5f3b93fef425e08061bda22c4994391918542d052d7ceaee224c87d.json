{"ast":null,"code":"import _objectSpread from \"/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from \"../error.mjs\";\nexport function makeParseableResponseFormat(response_format, parser) {\n  const obj = _objectSpread({}, response_format);\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nexport function isAutoParsableResponseFormat(response_format) {\n  return (response_format === null || response_format === void 0 ? void 0 : response_format['$brand']) === 'auto-parseable-response-format';\n}\nexport function makeParseableTool(tool, _ref) {\n  let {\n    parser,\n    callback\n  } = _ref;\n  const obj = _objectSpread({}, tool);\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    },\n    $callback: {\n      value: callback,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nexport function isAutoParsableTool(tool) {\n  return (tool === null || tool === void 0 ? void 0 : tool['$brand']) === 'auto-parseable-tool';\n}\nexport function maybeParseChatCompletion(completion, params) {\n  if (!params || !hasAutoParseableInput(params)) {\n    return _objectSpread(_objectSpread({}, completion), {}, {\n      choices: completion.choices.map(choice => {\n        var _choice$message$tool_;\n        return _objectSpread(_objectSpread({}, choice), {}, {\n          message: _objectSpread(_objectSpread({}, choice.message), {}, {\n            parsed: null,\n            tool_calls: (_choice$message$tool_ = choice.message.tool_calls) !== null && _choice$message$tool_ !== void 0 ? _choice$message$tool_ : []\n          })\n        });\n      })\n    });\n  }\n  return parseChatCompletion(completion, params);\n}\nexport function parseChatCompletion(completion, params) {\n  const choices = completion.choices.map(choice => {\n    var _choice$message$tool_2, _choice$message$tool_3;\n    if (choice.finish_reason === 'length') {\n      throw new LengthFinishReasonError();\n    }\n    if (choice.finish_reason === 'content_filter') {\n      throw new ContentFilterFinishReasonError();\n    }\n    return _objectSpread(_objectSpread({}, choice), {}, {\n      message: _objectSpread(_objectSpread({}, choice.message), {}, {\n        tool_calls: (_choice$message$tool_2 = (_choice$message$tool_3 = choice.message.tool_calls) === null || _choice$message$tool_3 === void 0 ? void 0 : _choice$message$tool_3.map(toolCall => parseToolCall(params, toolCall))) !== null && _choice$message$tool_2 !== void 0 ? _choice$message$tool_2 : [],\n        parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null\n      })\n    });\n  });\n  return _objectSpread(_objectSpread({}, completion), {}, {\n    choices\n  });\n}\nfunction parseResponseFormat(params, content) {\n  var _params$response_form, _params$response_form2;\n  if (((_params$response_form = params.response_format) === null || _params$response_form === void 0 ? void 0 : _params$response_form.type) !== 'json_schema') {\n    return null;\n  }\n  if (((_params$response_form2 = params.response_format) === null || _params$response_form2 === void 0 ? void 0 : _params$response_form2.type) === 'json_schema') {\n    if ('$parseRaw' in params.response_format) {\n      const response_format = params.response_format;\n      return response_format.$parseRaw(content);\n    }\n    return JSON.parse(content);\n  }\n  return null;\n}\nfunction parseToolCall(params, toolCall) {\n  var _params$tools;\n  const inputTool = (_params$tools = params.tools) === null || _params$tools === void 0 ? void 0 : _params$tools.find(inputTool => {\n    var _inputTool$function;\n    return ((_inputTool$function = inputTool.function) === null || _inputTool$function === void 0 ? void 0 : _inputTool$function.name) === toolCall.function.name;\n  });\n  return _objectSpread(_objectSpread({}, toolCall), {}, {\n    function: _objectSpread(_objectSpread({}, toolCall.function), {}, {\n      parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : inputTool !== null && inputTool !== void 0 && inputTool.function.strict ? JSON.parse(toolCall.function.arguments) : null\n    })\n  });\n}\nexport function shouldParseToolCall(params, toolCall) {\n  var _params$tools2;\n  if (!params) {\n    return false;\n  }\n  const inputTool = (_params$tools2 = params.tools) === null || _params$tools2 === void 0 ? void 0 : _params$tools2.find(inputTool => {\n    var _inputTool$function2;\n    return ((_inputTool$function2 = inputTool.function) === null || _inputTool$function2 === void 0 ? void 0 : _inputTool$function2.name) === toolCall.function.name;\n  });\n  return isAutoParsableTool(inputTool) || (inputTool === null || inputTool === void 0 ? void 0 : inputTool.function.strict) || false;\n}\nexport function hasAutoParseableInput(params) {\n  var _params$tools$some, _params$tools3;\n  if (isAutoParsableResponseFormat(params.response_format)) {\n    return true;\n  }\n  return (_params$tools$some = (_params$tools3 = params.tools) === null || _params$tools3 === void 0 ? void 0 : _params$tools3.some(t => isAutoParsableTool(t) || t.type === 'function' && t.function.strict === true)) !== null && _params$tools$some !== void 0 ? _params$tools$some : false;\n}\nexport function validateInputTools(tools) {\n  for (const tool of tools !== null && tools !== void 0 ? tools : []) {\n    if (tool.type !== 'function') {\n      throw new OpenAIError(\"Currently only `function` tool types support auto-parsing; Received `\".concat(tool.type, \"`\"));\n    }\n    if (tool.function.strict !== true) {\n      throw new OpenAIError(\"The `\".concat(tool.function.name, \"` tool is not marked with `strict: true`. Only strict function tools can be auto-parsed\"));\n    }\n  }\n}","map":{"version":3,"names":["ContentFilterFinishReasonError","LengthFinishReasonError","OpenAIError","makeParseableResponseFormat","response_format","parser","obj","_objectSpread","Object","defineProperties","$brand","value","enumerable","$parseRaw","isAutoParsableResponseFormat","makeParseableTool","tool","_ref","callback","$callback","isAutoParsableTool","maybeParseChatCompletion","completion","params","hasAutoParseableInput","choices","map","choice","_choice$message$tool_","message","parsed","tool_calls","parseChatCompletion","_choice$message$tool_2","_choice$message$tool_3","finish_reason","toolCall","parseToolCall","content","refusal","parseResponseFormat","_params$response_form","_params$response_form2","type","JSON","parse","_params$tools","inputTool","tools","find","_inputTool$function","function","name","parsed_arguments","arguments","strict","shouldParseToolCall","_params$tools2","_inputTool$function2","_params$tools$some","_params$tools3","some","t","validateInputTools","concat"],"sources":["/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/openai/src/lib/parser.ts"],"sourcesContent":["import {\n  ChatCompletion,\n  ChatCompletionCreateParams,\n  ChatCompletionMessageToolCall,\n  ChatCompletionTool,\n} from '../resources/chat/completions';\nimport {\n  ChatCompletionStreamingToolRunnerParams,\n  ChatCompletionStreamParams,\n  ChatCompletionToolRunnerParams,\n  ParsedChatCompletion,\n  ParsedChoice,\n  ParsedFunctionToolCall,\n} from '../resources/beta/chat/completions';\nimport { ResponseFormatJSONSchema } from '../resources/shared';\nimport { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from '../error';\n\ntype AnyChatCompletionCreateParams =\n  | ChatCompletionCreateParams\n  | ChatCompletionToolRunnerParams<any>\n  | ChatCompletionStreamingToolRunnerParams<any>\n  | ChatCompletionStreamParams;\n\nexport type ExtractParsedContentFromParams<Params extends AnyChatCompletionCreateParams> =\n  Params['response_format'] extends AutoParseableResponseFormat<infer P> ? P : null;\n\nexport type AutoParseableResponseFormat<ParsedT> = ResponseFormatJSONSchema & {\n  __output: ParsedT; // type-level only\n\n  $brand: 'auto-parseable-response-format';\n  $parseRaw(content: string): ParsedT;\n};\n\nexport function makeParseableResponseFormat<ParsedT>(\n  response_format: ResponseFormatJSONSchema,\n  parser: (content: string) => ParsedT,\n): AutoParseableResponseFormat<ParsedT> {\n  const obj = { ...response_format };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableResponseFormat<ParsedT>;\n}\n\nexport function isAutoParsableResponseFormat<ParsedT>(\n  response_format: any,\n): response_format is AutoParseableResponseFormat<ParsedT> {\n  return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\n\ntype ToolOptions = {\n  name: string;\n  arguments: any;\n  function?: ((args: any) => any) | undefined;\n};\n\nexport type AutoParseableTool<\n  OptionsT extends ToolOptions,\n  HasFunction = OptionsT['function'] extends Function ? true : false,\n> = ChatCompletionTool & {\n  __arguments: OptionsT['arguments']; // type-level only\n  __name: OptionsT['name']; // type-level only\n  __hasFunction: HasFunction; // type-level only\n\n  $brand: 'auto-parseable-tool';\n  $callback: ((args: OptionsT['arguments']) => any) | undefined;\n  $parseRaw(args: string): OptionsT['arguments'];\n};\n\nexport function makeParseableTool<OptionsT extends ToolOptions>(\n  tool: ChatCompletionTool,\n  {\n    parser,\n    callback,\n  }: {\n    parser: (content: string) => OptionsT['arguments'];\n    callback: ((args: any) => any) | undefined;\n  },\n): AutoParseableTool<OptionsT['arguments']> {\n  const obj = { ...tool };\n\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false,\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false,\n    },\n    $callback: {\n      value: callback,\n      enumerable: false,\n    },\n  });\n\n  return obj as AutoParseableTool<OptionsT['arguments']>;\n}\n\nexport function isAutoParsableTool(tool: any): tool is AutoParseableTool<any> {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\n\nexport function maybeParseChatCompletion<\n  Params extends ChatCompletionCreateParams | null,\n  ParsedT = Params extends null ? null : ExtractParsedContentFromParams<NonNullable<Params>>,\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...completion,\n      choices: completion.choices.map((choice) => ({\n        ...choice,\n        message: { ...choice.message, parsed: null, tool_calls: choice.message.tool_calls ?? [] },\n      })),\n    };\n  }\n\n  return parseChatCompletion(completion, params);\n}\n\nexport function parseChatCompletion<\n  Params extends ChatCompletionCreateParams,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\n  const choices: Array<ParsedChoice<ParsedT>> = completion.choices.map((choice): ParsedChoice<ParsedT> => {\n    if (choice.finish_reason === 'length') {\n      throw new LengthFinishReasonError();\n    }\n\n    if (choice.finish_reason === 'content_filter') {\n      throw new ContentFilterFinishReasonError();\n    }\n\n    return {\n      ...choice,\n      message: {\n        ...choice.message,\n        tool_calls: choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? [],\n        parsed:\n          choice.message.content && !choice.message.refusal ?\n            parseResponseFormat(params, choice.message.content)\n          : null,\n      },\n    };\n  });\n\n  return { ...completion, choices };\n}\n\nfunction parseResponseFormat<\n  Params extends ChatCompletionCreateParams,\n  ParsedT = ExtractParsedContentFromParams<Params>,\n>(params: Params, content: string): ParsedT | null {\n  if (params.response_format?.type !== 'json_schema') {\n    return null;\n  }\n\n  if (params.response_format?.type === 'json_schema') {\n    if ('$parseRaw' in params.response_format) {\n      const response_format = params.response_format as AutoParseableResponseFormat<ParsedT>;\n\n      return response_format.$parseRaw(content);\n    }\n\n    return JSON.parse(content);\n  }\n\n  return null;\n}\n\nfunction parseToolCall<Params extends ChatCompletionCreateParams>(\n  params: Params,\n  toolCall: ChatCompletionMessageToolCall,\n): ParsedFunctionToolCall {\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n  return {\n    ...toolCall,\n    function: {\n      ...toolCall.function,\n      parsed_arguments:\n        isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)\n        : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)\n        : null,\n    },\n  };\n}\n\nexport function shouldParseToolCall(\n  params: ChatCompletionCreateParams | null | undefined,\n  toolCall: ChatCompletionMessageToolCall,\n): boolean {\n  if (!params) {\n    return false;\n  }\n\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\n  return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\n\nexport function hasAutoParseableInput(params: AnyChatCompletionCreateParams): boolean {\n  if (isAutoParsableResponseFormat(params.response_format)) {\n    return true;\n  }\n\n  return (\n    params.tools?.some(\n      (t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true),\n    ) ?? false\n  );\n}\n\nexport function validateInputTools(tools: ChatCompletionTool[] | undefined) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new OpenAIError(\n        `Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``,\n      );\n    }\n\n    if (tool.function.strict !== true) {\n      throw new OpenAIError(\n        `The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`,\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}