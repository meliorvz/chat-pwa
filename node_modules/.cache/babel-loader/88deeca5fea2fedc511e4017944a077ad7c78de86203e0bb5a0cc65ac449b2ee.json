{"ast":null,"code":"import _objectSpread from \"/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../resource.mjs\";\nimport { sleep, isRequestOptions } from \"../../../core.mjs\";\nimport { CursorPage } from \"../../../pagination.mjs\";\nexport class Files extends APIResource {\n  /**\n   * Create a vector store file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to a\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n   */\n  create(vectorStoreId, body, options) {\n    return this._client.post(\"/vector_stores/\".concat(vectorStoreId, \"/files\"), _objectSpread(_objectSpread({\n      body\n    }, options), {}, {\n      headers: _objectSpread({\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers)\n    }));\n  }\n  /**\n   * Retrieves a vector store file.\n   */\n  retrieve(vectorStoreId, fileId, options) {\n    return this._client.get(\"/vector_stores/\".concat(vectorStoreId, \"/files/\").concat(fileId), _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread({\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers)\n    }));\n  }\n  list(vectorStoreId) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    if (isRequestOptions(query)) {\n      return this.list(vectorStoreId, {}, query);\n    }\n    return this._client.getAPIList(\"/vector_stores/\".concat(vectorStoreId, \"/files\"), VectorStoreFilesPage, _objectSpread(_objectSpread({\n      query\n    }, options), {}, {\n      headers: _objectSpread({\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers)\n    }));\n  }\n  /**\n   * Delete a vector store file. This will remove the file from the vector store but\n   * the file itself will not be deleted. To delete the file, use the\n   * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n   * endpoint.\n   */\n  del(vectorStoreId, fileId, options) {\n    return this._client.delete(\"/vector_stores/\".concat(vectorStoreId, \"/files/\").concat(fileId), _objectSpread(_objectSpread({}, options), {}, {\n      headers: _objectSpread({\n        'OpenAI-Beta': 'assistants=v2'\n      }, options === null || options === void 0 ? void 0 : options.headers)\n    }));\n  }\n  /**\n   * Attach a file to the given vector store and wait for it to be processed.\n   */\n  async createAndPoll(vectorStoreId, body, options) {\n    const file = await this.create(vectorStoreId, body, options);\n    return await this.poll(vectorStoreId, file.id, options);\n  }\n  /**\n   * Wait for the vector store file to finish processing.\n   *\n   * Note: this will return even if the file failed to process, you need to check\n   * file.last_error and file.status to handle these cases\n   */\n  async poll(vectorStoreId, fileId, options) {\n    const headers = _objectSpread(_objectSpread({}, options === null || options === void 0 ? void 0 : options.headers), {}, {\n      'X-Stainless-Poll-Helper': 'true'\n    });\n    if (options !== null && options !== void 0 && options.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const fileResponse = await this.retrieve(vectorStoreId, fileId, _objectSpread(_objectSpread({}, options), {}, {\n        headers\n      })).withResponse();\n      const file = fileResponse.data;\n      switch (file.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n          if (options !== null && options !== void 0 && options.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return file;\n      }\n    }\n  }\n  /**\n   * Upload a file to the `files` API and then attach it to the given vector store.\n   *\n   * Note the file will be asynchronously processed (you can use the alternative\n   * polling helper method to wait for processing to complete).\n   */\n  async upload(vectorStoreId, file, options) {\n    const fileInfo = await this._client.files.create({\n      file: file,\n      purpose: 'assistants'\n    }, options);\n    return this.create(vectorStoreId, {\n      file_id: fileInfo.id\n    }, options);\n  }\n  /**\n   * Add a file to a vector store and poll until processing is complete.\n   */\n  async uploadAndPoll(vectorStoreId, file, options) {\n    const fileInfo = await this.upload(vectorStoreId, file, options);\n    return await this.poll(vectorStoreId, fileInfo.id, options);\n  }\n}\nexport class VectorStoreFilesPage extends CursorPage {}\nFiles.VectorStoreFilesPage = VectorStoreFilesPage;","map":{"version":3,"names":["APIResource","sleep","isRequestOptions","CursorPage","Files","create","vectorStoreId","body","options","_client","post","concat","_objectSpread","headers","retrieve","fileId","get","list","query","arguments","length","undefined","getAPIList","VectorStoreFilesPage","del","delete","createAndPoll","file","poll","id","pollIntervalMs","toString","fileResponse","withResponse","data","status","sleepInterval","headerInterval","response","headerIntervalMs","parseInt","isNaN","upload","fileInfo","files","purpose","file_id","uploadAndPoll"],"sources":["/Users/victor/Documents/Sublime/claude_api_project/chat-pwa/node_modules/openai/src/resources/beta/vector-stores/files.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../../../resource';\nimport { sleep, Uploadable, isRequestOptions } from '../../../core';\nimport * as Core from '../../../core';\nimport * as VectorStoresAPI from './vector-stores';\nimport { CursorPage, type CursorPageParams } from '../../../pagination';\n\nexport class Files extends APIResource {\n  /**\n   * Create a vector store file by attaching a\n   * [File](https://platform.openai.com/docs/api-reference/files) to a\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n   */\n  create(\n    vectorStoreId: string,\n    body: FileCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFile> {\n    return this._client.post(`/vector_stores/${vectorStoreId}/files`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a vector store file.\n   */\n  retrieve(\n    vectorStoreId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFile> {\n    return this._client.get(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of vector store files.\n   */\n  list(\n    vectorStoreId: string,\n    query?: FileListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, VectorStoreFile>;\n  list(\n    vectorStoreId: string,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, VectorStoreFile>;\n  list(\n    vectorStoreId: string,\n    query: FileListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<VectorStoreFilesPage, VectorStoreFile> {\n    if (isRequestOptions(query)) {\n      return this.list(vectorStoreId, {}, query);\n    }\n    return this._client.getAPIList(`/vector_stores/${vectorStoreId}/files`, VectorStoreFilesPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete a vector store file. This will remove the file from the vector store but\n   * the file itself will not be deleted. To delete the file, use the\n   * [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n   * endpoint.\n   */\n  del(\n    vectorStoreId: string,\n    fileId: string,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<VectorStoreFileDeleted> {\n    return this._client.delete(`/vector_stores/${vectorStoreId}/files/${fileId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v2', ...options?.headers },\n    });\n  }\n\n  /**\n   * Attach a file to the given vector store and wait for it to be processed.\n   */\n  async createAndPoll(\n    vectorStoreId: string,\n    body: FileCreateParams,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFile> {\n    const file = await this.create(vectorStoreId, body, options);\n    return await this.poll(vectorStoreId, file.id, options);\n  }\n\n  /**\n   * Wait for the vector store file to finish processing.\n   *\n   * Note: this will return even if the file failed to process, you need to check\n   * file.last_error and file.status to handle these cases\n   */\n  async poll(\n    vectorStoreId: string,\n    fileId: string,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFile> {\n    const headers: { [key: string]: string } = { ...options?.headers, 'X-Stainless-Poll-Helper': 'true' };\n    if (options?.pollIntervalMs) {\n      headers['X-Stainless-Custom-Poll-Interval'] = options.pollIntervalMs.toString();\n    }\n    while (true) {\n      const fileResponse = await this.retrieve(vectorStoreId, fileId, {\n        ...options,\n        headers,\n      }).withResponse();\n\n      const file = fileResponse.data;\n\n      switch (file.status) {\n        case 'in_progress':\n          let sleepInterval = 5000;\n\n          if (options?.pollIntervalMs) {\n            sleepInterval = options.pollIntervalMs;\n          } else {\n            const headerInterval = fileResponse.response.headers.get('openai-poll-after-ms');\n            if (headerInterval) {\n              const headerIntervalMs = parseInt(headerInterval);\n              if (!isNaN(headerIntervalMs)) {\n                sleepInterval = headerIntervalMs;\n              }\n            }\n          }\n          await sleep(sleepInterval);\n          break;\n        case 'failed':\n        case 'completed':\n          return file;\n      }\n    }\n  }\n\n  /**\n   * Upload a file to the `files` API and then attach it to the given vector store.\n   *\n   * Note the file will be asynchronously processed (you can use the alternative\n   * polling helper method to wait for processing to complete).\n   */\n  async upload(\n    vectorStoreId: string,\n    file: Uploadable,\n    options?: Core.RequestOptions,\n  ): Promise<VectorStoreFile> {\n    const fileInfo = await this._client.files.create({ file: file, purpose: 'assistants' }, options);\n    return this.create(vectorStoreId, { file_id: fileInfo.id }, options);\n  }\n\n  /**\n   * Add a file to a vector store and poll until processing is complete.\n   */\n  async uploadAndPoll(\n    vectorStoreId: string,\n    file: Uploadable,\n    options?: Core.RequestOptions & { pollIntervalMs?: number },\n  ): Promise<VectorStoreFile> {\n    const fileInfo = await this.upload(vectorStoreId, file, options);\n    return await this.poll(vectorStoreId, fileInfo.id, options);\n  }\n}\n\nexport class VectorStoreFilesPage extends CursorPage<VectorStoreFile> {}\n\n/**\n * A list of files attached to a vector store.\n */\nexport interface VectorStoreFile {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the vector store file was created.\n   */\n  created_at: number;\n\n  /**\n   * The last error associated with this vector store file. Will be `null` if there\n   * are no errors.\n   */\n  last_error: VectorStoreFile.LastError | null;\n\n  /**\n   * The object type, which is always `vector_store.file`.\n   */\n  object: 'vector_store.file';\n\n  /**\n   * The status of the vector store file, which can be either `in_progress`,\n   * `completed`, `cancelled`, or `failed`. The status `completed` indicates that the\n   * vector store file is ready for use.\n   */\n  status: 'in_progress' | 'completed' | 'cancelled' | 'failed';\n\n  /**\n   * The total vector store usage in bytes. Note that this may be different from the\n   * original file size.\n   */\n  usage_bytes: number;\n\n  /**\n   * The ID of the\n   * [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object)\n   * that the [File](https://platform.openai.com/docs/api-reference/files) is\n   * attached to.\n   */\n  vector_store_id: string;\n\n  /**\n   * The strategy used to chunk the file.\n   */\n  chunking_strategy?: VectorStoresAPI.FileChunkingStrategy;\n}\n\nexport namespace VectorStoreFile {\n  /**\n   * The last error associated with this vector store file. Will be `null` if there\n   * are no errors.\n   */\n  export interface LastError {\n    /**\n     * One of `server_error` or `rate_limit_exceeded`.\n     */\n    code: 'server_error' | 'unsupported_file' | 'invalid_file';\n\n    /**\n     * A human-readable description of the error.\n     */\n    message: string;\n  }\n}\n\nexport interface VectorStoreFileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'vector_store.file.deleted';\n}\n\nexport interface FileCreateParams {\n  /**\n   * A [File](https://platform.openai.com/docs/api-reference/files) ID that the\n   * vector store should use. Useful for tools like `file_search` that can access\n   * files.\n   */\n  file_id: string;\n\n  /**\n   * The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n   * strategy. Only applicable if `file_ids` is non-empty.\n   */\n  chunking_strategy?: VectorStoresAPI.FileChunkingStrategyParam;\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * starting with obj_foo, your subsequent call can include before=obj_foo in order\n   * to fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n   */\n  filter?: 'in_progress' | 'completed' | 'failed' | 'cancelled';\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nFiles.VectorStoreFilesPage = VectorStoreFilesPage;\n\nexport declare namespace Files {\n  export {\n    type VectorStoreFile as VectorStoreFile,\n    type VectorStoreFileDeleted as VectorStoreFileDeleted,\n    VectorStoreFilesPage as VectorStoreFilesPage,\n    type FileCreateParams as FileCreateParams,\n    type FileListParams as FileListParams,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}